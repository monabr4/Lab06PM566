#2020
dim(PM2022)
head(PM2022)
tail(PM2022)
colnames(PM2022)
summary(PM2022)
#2002
dim(PM2002)
head(PM2002)
tail(PM2002)
colnames(PM2002)
summary(PM2002)
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
final_dataset
#Color Pallete
color_palette <- colorFactor(
palette = c( "green", "orange"),  # Specify colors for each year
domain = final_dataset$YEAR  # Use the YEAR column from your dataset
)
leaflet(final_dataset) %>%
addProviderTiles('OpenStreetMap') %>%
addCircles(
lat = ~SITE_LATITUDE,
lng = ~SITE_LONGITUDE,
opacity = 1,
fillOpacity = 1,
radius = 100,
color = ~color_palette(YEAR),  # Color circles based on the YEAR column
popup = ~Site_Name  # Display SITE_NAME in the popup
)%>%
addLegend(
pal = color_palette,
values = ~YEAR,
title = "Year",
position = "bottomright"
)
#final_dataset
#leaflet(final_dataset) %>%
# addProviderTiles('OpenStreetMap') %>%
#addCircles(lat=~SITE_LATITUDE,lng=~SITE_LONGITUDE, opacity=1, fillOpacity=1, radius=100,popup =)
#Need to add the different colors for each year
missing_pm <- final_dataset %>%
filter(is.na(Daily_Mean_PM2.5_Concentration))
missing_pm
max(final_dataset$Daily_Mean_PM2.5_Concentration)
min(final_dataset$Daily_Mean_PM2.5_Concentration)
negative_PM2.5 <- final_dataset %>%filter(Daily_Mean_PM2.5_Concentration<0)
dim(negative_PM2.5) #218 values that are less than 0
print(negative_PM2.5)
#But there are negative values of PM2.5, which is impossible.
#None have values of N/A
ggplot(final_dataset, aes(x = YEAR, y =Daily_Mean_PM2.5_Concentration )) +
geom_boxplot() +
labs(title = "Box Plot of Daily Mean PM2.5 Concentration by Year", x = "Year", y = "PM2.5")
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
#This data set is only based in California
unique(final_dataset$STATE)
final_dataset
p1
#County
unique(final_dataset$COUNTY)
#Site Names are not clean
library(ggsignif)
p1 <- ggplot(final_dataset, aes(COUNTY, Daily_Mean_PM2.5_Concentration)) +
geom_boxplot() +
geom_signif(
map_signif_level = TRUE, textsize = 6
) +
ylim(NA, 48)
p1
#County
unique(final_dataset$COUNTY)
#Site Names are not clean
library(ggsignif)
p1 <- ggplot(final_dataset, aes(COUNTY, Daily_Mean_PM2.5_Concentration)) +
geom_boxplot() +
geom_signif(
map_signif_level = TRUE, textsize = 6
) +
ylim(NA, 48)
p1
p1
#County
unique(final_dataset$COUNTY)
#Site Names are not clean
library(ggsignif)
p1 <- ggplot(final_dataset, aes(COUNTY, Daily_Mean_PM2.5_Concentration)) +
geom_boxplot() +
geom_signif(
map_signif_level = TRUE
) +
ylim(NA, 48)
p1
#County
unique(final_dataset$COUNTY)
#Site Names are not clean
#County
unique(final_dataset$COUNTY)
#County
unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
ggplot(final_dataset), aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
#County
unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
library(readr)
library(magrittr)
library(devtools)
library(leaflet)
library(knitr)
library(leaflet)
PM2022 <- read_csv("~/Desktop/PM566/Assigment_1/2022_PM2.5.csv")
PM2002 <- read_csv("~/Desktop/PM566/Assigment_1/2002_PM2.5.csv")
#2020
dim(PM2022)
head(PM2022)
tail(PM2022)
colnames(PM2022)
summary(PM2022)
#2002
dim(PM2002)
head(PM2002)
tail(PM2002)
colnames(PM2002)
summary(PM2002)
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
final_dataset
#Color Pallete
color_palette <- colorFactor(
palette = c( "green", "orange"),  # Specify colors for each year
domain = final_dataset$YEAR  # Use the YEAR column from your dataset
)
leaflet(final_dataset) %>%
addProviderTiles('OpenStreetMap') %>%
addCircles(
lat = ~SITE_LATITUDE,
lng = ~SITE_LONGITUDE,
opacity = 1,
fillOpacity = 1,
radius = 100,
color = ~color_palette(YEAR),  # Color circles based on the YEAR column
popup = ~Site_Name  # Display SITE_NAME in the popup
)%>%
addLegend(
pal = color_palette,
values = ~YEAR,
title = "Year",
position = "bottomright"
)
#final_dataset
#leaflet(final_dataset) %>%
# addProviderTiles('OpenStreetMap') %>%
#addCircles(lat=~SITE_LATITUDE,lng=~SITE_LONGITUDE, opacity=1, fillOpacity=1, radius=100,popup =)
#Need to add the different colors for each year
missing_pm <- final_dataset %>%
filter(is.na(Daily_Mean_PM2.5_Concentration))
missing_pm
max(final_dataset$Daily_Mean_PM2.5_Concentration)
min(final_dataset$Daily_Mean_PM2.5_Concentration)
negative_PM2.5 <- final_dataset %>%filter(Daily_Mean_PM2.5_Concentration<0)
dim(negative_PM2.5) #218 values that are less than 0
print(negative_PM2.5)
#But there are negative values of PM2.5, which is impossible.
#None have values of N/A
ggplot(final_dataset, aes(x = YEAR, y =Daily_Mean_PM2.5_Concentration )) +
geom_boxplot() +
labs(title = "Box Plot of Daily Mean PM2.5 Concentration by Year", x = "Year", y = "PM2.5")
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
#This data set is only based in California
unique(final_dataset$STATE)
final_dataset
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
b<-ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
b
b
b
#This data set is only based in California
unique(final_dataset$STATE)
final_dataset
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
final_dataset
#2020
dim(PM2022)
head(PM2022)
tail(PM2022)
colnames(PM2022)
summary(PM2022)
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
final_dataset
#This data set is only based in California
summarise(final_dataset$Daily_Mean_PM2.5_Concentration)
#This data set is only based in California
summary(final_dataset$Daily_Mean_PM2.5_Concentration)
final_dataset
PM2022 <- read_csv("~/Desktop/PM566/Assigment_1/2022_PM2.5.csv")
PM2002 <- read_csv("~/Desktop/PM566/Assigment_1/2002_PM2.5.csv")
#2020
dim(PM2022)
head(PM2022)
tail(PM2022)
colnames(PM2022)
summary(PM2022)
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
final_dataset
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
final_dataset
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year,year_dataframe$Month)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name"  )
final_dataset
library(tidyr)
library(datasets)
bothyears <- rbind(PM2002, PM2022)
library(dplyr)
library(datasets)
#Seperated Dates
bothyears1 <- data.frame(date = bothyears$Date)
year_dataframe<-separate(bothyears1 , "date", c("Month", "Day", "Year"), sep = "/")
#combined the data inwhich the year column has a long name
semifinal_dataset<-cbind(bothyears,year_dataframe$Year,year_dataframe$Month)
#Change all the column names in the data frame
final_dataset <-semifinal_dataset %>% rename("YEAR"= "year_dataframe$Year","Daily_Mean_PM2.5_Concentration"= "Daily Mean PM2.5 Concentration","Site_Name"= "Site Name" , "Month"= "year_dataframe$Month" )
final_dataset
#Color Pallete
color_palette <- colorFactor(
palette = c( "green", "orange"),  # Specify colors for each year
domain = final_dataset$YEAR  # Use the YEAR column from your dataset
)
leaflet(final_dataset) %>%
addProviderTiles('OpenStreetMap') %>%
addCircles(
lat = ~SITE_LATITUDE,
lng = ~SITE_LONGITUDE,
opacity = 1,
fillOpacity = 1,
radius = 100,
color = ~color_palette(YEAR),  # Color circles based on the YEAR column
popup = ~Site_Name  # Display SITE_NAME in the popup
)%>%
addLegend(
pal = color_palette,
values = ~YEAR,
title = "Year",
position = "bottomright"
)
#final_dataset
#leaflet(final_dataset) %>%
# addProviderTiles('OpenStreetMap') %>%
#addCircles(lat=~SITE_LATITUDE,lng=~SITE_LONGITUDE, opacity=1, fillOpacity=1, radius=100,popup =)
#Need to add the different colors for each year
missing_pm <- final_dataset %>%
filter(is.na(Daily_Mean_PM2.5_Concentration))
missing_pm
max(final_dataset$Daily_Mean_PM2.5_Concentration)
min(final_dataset$Daily_Mean_PM2.5_Concentration)
negative_PM2.5 <- final_dataset %>%filter(Daily_Mean_PM2.5_Concentration<0)
dim(negative_PM2.5) #218 values that are less than 0
print(negative_PM2.5)
#But there are negative values of PM2.5, which is impossible.
#None have values of N/A
missing_pm <- final_dataset %>%
filter(is.na(Daily_Mean_PM2.5_Concentration))
missing_pm
max(final_dataset$Daily_Mean_PM2.5_Concentration)
min(final_dataset$Daily_Mean_PM2.5_Concentration)
negative_PM2.5 <- final_dataset %>%filter(Daily_Mean_PM2.5_Concentration<0)
dim(negative_PM2.5) #218 values that are less than 0
print(negative_PM2.5)
#But there are negative values of PM2.5, which is impossible.
#None have values of N/A
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
b<-ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
b
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
b<-ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
b
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
b<-ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
b
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
b<-ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
b
#County
#unique(final_dataset$COUNTY)
library(ggplot2)
# Create a violin plot with a categorical variable on the x-axis
b<-ggplot(final_dataset, aes(x = COUNTY, y = Daily_Mean_PM2.5_Concentration)) +
geom_violin() +
labs(title = "Violin Plot of Value by Category", x = "Category", y = "Value")
b
#This data set is only based in California
summary(final_dataset$Daily_Mean_PM2.5_Concentration)
final_dataset
ggplot(final_dataset, aes(x = YEAR, y =Daily_Mean_PM2.5_Concentration )) +
geom_boxplot() +
labs(title = "Box Plot of Daily Mean PM2.5 Concentration by Year", x = "Year", y = "PM2.5")
#This data set is only based in California
summary(final_dataset$Daily_Mean_PM2.5_Concentration)
final_dataset
ggplot(final_dataset, aes(x = YEAR, y =Daily_Mean_PM2.5_Concentration )) +
geom_boxplot() +
labs(title = "Box Plot of Daily Mean PM2.5 Concentration by Year", x = "Year", y = "PM2.5")
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
#This data set is only based in California
summary(final_dataset$Daily_Mean_PM2.5_Concentration)
final_dataset
ggplot(final_dataset, aes(x = YEAR, y =Daily_Mean_PM2.5_Concentration )) +
geom_boxplot() +
labs(title = "Box Plot of Daily Mean PM2.5 Concentration by Year", x = "Year", y = "PM2.5")
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
#This data set is only based in California
summary(final_dataset$Daily_Mean_PM2.5_Concentration)
final_dataset
ggplot(final_dataset, aes(x = YEAR, y =Daily_Mean_PM2.5_Concentration )) +
geom_boxplot() +
labs(title = "Box Plot of Daily Mean PM2.5 Concentration by Year", x = "Year", y = "PM2.5")
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
#This data set is only based in California
summary(final_dataset$Daily_Mean_PM2.5_Concentration)
final_dataset
ggplot(final_dataset, aes(x = YEAR, y =Daily_Mean_PM2.5_Concentration )) +
geom_boxplot() +
labs(title = "Box Plot of Daily Mean PM2.5 Concentration by Year", x = "Year", y = "PM2.5")
library(ggplot2)
ggplot(final_dataset, aes(x = Daily_Mean_PM2.5_Concentration, fill=YEAR)) +
geom_histogram(binwidth = 0.50) +
labs(title = "Histogram of PM2.5 Values",
x = "PM2.5",
y = "Frequency")
